<?php
return [
    'version'                               => 'Версия',
    'opcache.enable'                        => 'Включение/выключение OpCache.
    В выключенном состоянии код не оптимизируется и не кешируется.',
    'opcache.enable_cli'                    => 'Включение OpCache для CLI-версии PHP.
    Наилучшим образом подходит для тестирование и отладки.',
    'opcache.use_cwd'                       => 'При включении этого параметра, OpCache добавляет текущую рабочую
    директорию в ключ скрипта для предотвращения возникновения колизий между файлами  с одинаковым именем.
    Выключение этой функции увеличивает производительность, но может нарушить работу приложений.',
    'opcache.validate_timestamps'           => 'При отключенном параметре, появляется возможность обнуления OpCache
     вручную или перезапуском вебсервера для того, чтобы привести в актуальное состояние данных об изменениях в файлах.
     Частота проверки управляется параметром opcache.revalidate_freq',
    'opcache.validate_permission'           => 'Проверять полномочия кешированных файло.',
    'opcache.validate_root'                 => 'Предотвращение коллизий имен в chroot - окружении',
    'opcache.inherited_hack'                => 'В php-5.3 и выше этот хак более не требуется и изменение параметра ни коим образом не скажется на работе.',
    'opcache.dups_fix'                      => 'Включайте этот параметр только при появлении ошибок вида Cannot redeclare class',
    'opcache.revalidate_path'               => 'Включение или отключение оптимизации поиска файлов в include_path.
    Если поиск файлов выключен и будет найден закешированный файл, используемый в include_path, файл не будет найден
     повторно.  Таким образом, если файл с именем, попадающийся где-либо еще в include_path, он не будет найден.
    Включайте этот параметр только в случае, если это действительно принесет ожидаемый эффект ускорения.
    По умолчанию возможность отключена, т.е оптимизация активирована.',
    'opcache.log_verbosity_level'           => 'Все ошибки OpCache отправлять в лог-файл лог-файл веб-сервера. По умолчанию, журналируются только критические ошибки (level 0) или обычные ошибки (level 1). Так же можно включить выводит предупреждений (level 2), информационных сообщений (level 3) или отладочную информацию (level 4).',
    'opcache.memory_consumption'            => 'Размер используемой памяти для хранения  прекомпилированного PHP-кода.
     Размер указывается в мегабайтах.',
    'opcache.interned_strings_buffer'       => 'Количество памяти для пула строк в мегабайтах',
    'opcache.max_accelerated_files'         => 'Максимальное количество ключей (скриптов) в хэш-таблице OpCache.
     Число должно быть простым и быть больше, чем те, что приведены в примере:{ 223, 463, 983, 1979, 3907, 7963, 16229,
      32531, 65407, 130987, 262237, 524521, 1048793 }. Допустимы числа между 200 и 1000000.',
    'opcache.max_wasted_percentage'         => 'Максимальный процент потеряной памяти
    для запланированного перезапуска.',
    'opcache.consistency_checks'            => 'Проверять контрольную сумму кэша каждое N-ое количество запросов. По умолчанию параметр имеет значение равное нулю, что означает отключение проверки. Подсчет контрольной суммы снижает производительность, этот параметр следует включать только если требуется отладка.',
    'opcache.force_restart_timeout'         => 'Какое время ожидать (в секундах) перед запланированной перезагрузкой в случае недоступности кэша.',
    'opcache.revalidate_freq'               => 'Через какой промежуток времени (в секундах) проверять изменения
    временных меток для поддержания данных в памяти в актуальном состоянии. (“1” означает проверку с периодичностью
    раз в секунду для запроса, “0” — постоянная проверка)',
    'opcache.preferred_memory_model'        => 'Предпочитаемый бэкэнд общей памяти. Можно оставить пустым и позволить системе самой разобраться.',
    'opcache.blacklist_filename'            => 'Месторасположение списка файлов, к которым запрещен доступ для OpCache (поддерживаются маски). Каждый такой файл является текстовым файлом, в котором хранятся имена файлов, которые не требуется кешировать.Формат файла предусматривает размещение каждого имени файла в отдельной строке. Имя файла может содержать полный путь, либо префикс (к примеру /var/www/x укажет на все файлы в директориях, начинающихся на ‘x’. Строки, начинающиеся с “;” игнорируются (комментарии). Обычно, блокируют файлы следующих типов:  Директории, в которых содержатся автоматически генерирующиеся файлы с кодом (к примеру кеш Smarty или ZFW фреймворков); Код, который не работает при кешировании/оптимизации;Код, который не отображается по причине ошибок в OpCache.',
    'opcache.max_file_size'                 => 'Позволяет исключать большие файлы из кеширования. По умолчанию кешируются все файлы.',
    'opcache.error_log'                     => 'Определение названия и местоположения лога ошибок OpCache. При пустом значении ошибки выводятся в stderr',
    'opcache.protect_memory'                => 'Защита общей памяти от несанкционированной записи во время выполнения скрипта. Полезно только для отладки.',
    'opcache.save_comments'                 => 'Если выключено, все комментарии PHPDoc будут удалены из кода с целью
    уменьшения размера оптимизированного кода. Отключение параметра может вызвать некорректную работу некоторых
    приложений или фреймворков (к примеру, Doctrine, ZF2, PHPUnit)',
    'opcache.load_comments'=>'Если выключено, комментарии PHPDoc не будут загружаться из общей памяти. При включении вывода, комментарии будут сохранятся, но выводиться приложениями только в случае надобности.',
    'opcache.fast_shutdown'                 => 'Если включено, будет использоваться последовательность быстрых выключений для оптимизированного кода. Эта возможность не освобождает каждый используемый блок памяти, но позволяет работать Zend Engine Memory Manager.',
    'opcache.enable_file_override'          => 'При включении OpCache будет проверять наличие закешированного файла при вызовах file_exists(),is_file() и is_readable(). Это может увеличить скорость работы в приложениях, которые проверяют расширение и читабельность PHP-скриптов, но появляется риск вывода устаревших данных в случае отключения параметра opcache.validate_timestamps.',
    'opcache.optimization_level'            => 'Маска битности, в которой каждый бит включает или отключает в соответствующие проходы OpCache.',
    'opcache.lockfile_path'                 => '',
    'opcache.file_update_protection'=>'Через какой промежуток времени (в секундах) проверять изменения временных
    меток для поддержания данных в памяти в актуальном состоянии. (“1” означает проверку с периодичностью раз в
    секунду для запроса, “0” — постоянная проверка)',
    'opcache.file_cache'                    => 'Enables and sets the second level cache directory.
 It should improve performance when SHM memory is full, at server restart or
 SHM reset. The default "" disables file based caching.',
    'opcache.file_cache_only'               => 'Включение кеширования в разделяемой памяти',
    'opcache.file_cache_consistency_checks' => 'Включение проверки контрольной суммы файлов загружаемых из кеша',
    'opcache.restrict_api'=>'Разрешение вызова API-функций OpCache из PHP-скриптов,  путь к которым начинается тем, что указано в строке. По умолчанию пустое значение означает разрешение на всё.',
    'opcache.mmap_base'=>'Маппирование основных сегментов памяти (только для Windows). Все процессы PHP маппируются в общей памяти в некотором адресном пространстве. Этот параметр позволяет вручную исправить ошибки вида "Unable to reattach to base address"',
    'opcache.huge_code_pages'=>'Enables or disables copying of PHP code (text segment) into HUGE PAGES.
     This should improve performance, but requires appropriate OS configuration.',
    'opcache.file_cache_fallback'=>'Implies opcache.file_cache_only=1 for a certain process that failed to
reattach to the shared memory (for Windows only). Explicitly enabled file cache is required.'
];